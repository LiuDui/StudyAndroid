git初始化：
（1）创建一个文件夹
（2）在该文件夹下，打开bash
（3）使用git init 命令初始化为一个仓库

git使用步骤：
（1）在仓库中创建文件
（2）使用
     $ git add learngit.txt
（3）没有任何显示就正确。（Unix哲学：没有消息就是好消息）
（4）使用
    $ git commit -m "说明"
    提交到仓库，git commit命令， -m 后面输入的是本次提交说明，可以输入任何内容，最好是
    有意义的，这样就可以从历史记录中方便的找到改动记录。

git commit可以一次性提交很多文件，例如：

$ git add one.txt two.txt
$ git commit -m "add 3 files"
[master 2cf8f57] add 3 files
 2 files changed, 1 insertion(+)
 create mode 100644 one.txt
 create mode 100644 two.txt

 文件被修改后，并sava到本地磁盘后，git可以知道文件的更改，使用
 $ git status
 获取文件的更改，例如

 $ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   learngit.txt
        modified:   one.txt

no changes added to commit (use "git add" and/or "git commit -a")

再通过diff命令查看更改：

$ git diff
diff --git a/learngit.txt b/learngit.txt
index 09e60a1..b1355e8 100644
--- a/learngit.txt
+++ b/learngit.txt
@@ -1,3 +1,23 @@
+git初始化：
+（1）创建一个文件夹
+（2）在该文件夹下，打开bash
+（3）使用git init 命令初始化为一个仓库
+
+git使用步骤：
（1）在仓库中创建文件
（2）使用
     $ git add learngit.txt
+（3）没有任何显示就正确。（Unix哲学：没有消息就是好消息）
+（4）使用
+    $ git commit -m "说明"
+    提交到仓库，git commit命令， -m 后面输入的是本次提交说明，可以输入任何内容
，最好是
+    有意义的，这样就可以从历史记录中方便的找到改动记录。
+
+git commit可以一次性提交很多文件，例如：
+
+$ git add one.txt two.txt
+$ git commit -m "add 3 files"
+[master 2cf8f57] add 3 files
+ 2 files changed, 1 insertion(+)
+ create mode 100644 one.txt
+ create mode 100644 two.txt
diff --git a/one.txt b/one.txt
index 1b6ad6c..f7745e3 100644
--- a/one.txt
+++ b/one.txt
@@ -1 +1 @@
-
+add letter in one

查看更改后，若文件没有问题，就使用
$ git add
$ git commit
进行提交

版本回退：
（1）回退到当前head的之前的版本
git reset --hard HEAD^
（2）回退到某个历史版本
git reset --hard commit_id
（3）回退之后，后悔
git reflog 取得版本号
git reset --hard commit_id

工作区和暂存区：
（1）工作区：电脑中能看到的目录，例如当前文件夹就是一个工作区
（2）版本库及暂存区：工作区有一个隐藏目录.git，是Git的版本库，其中存了很多东西，最重要的就是称为stage（或者叫index）的暂存区，还有Git自动创建的第一个分支master，以及指向,master的一个指针叫HEAD

将文件添加入Git版本库中的过程：
（1）第一步git add把文件添加进去，实际是把文件修改添加到暂存区；
（2）第二部git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。

因为在创建Git版本库时，Git会自动创建唯一的一个master分支，所以，git commit就是往master分支上提交更改，可以理解为：需要提交的文件修改统统放到暂存区，一次性提交暂存区的所有修改。
所以在commit后，暂存区是空的。


管理修改

Git相比其他版本控制系统设计的优秀，因为Git跟踪的并管理的是 修改 而非 文件。
Git管理的是修改，当用git add命令后，在工作区的修改会被放入暂存区，准备提交，所以commit只针对暂存区存放的修改

git add可以累计修改，也就是一个文件 修改 add 修改 add ... 最后commit

------------------------

撤销修改

（1）在工作区对文件进行了更改，可以使用
git checkout -- file_name
撤销更改，该命令的意思是，把file.name的意思就是，将file_name在工作区的修改全部撤销，有两种情况：
一种是file_name自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库中一模一样的状态；
一种是file_name已经添加到暂存区，又做了修改，现在，撤销修改就是回到添加到暂存区后的状态；
总之，就是让文件回到最近一次git commit或git add时的状态

该命令中 --参数很重要，若没有该参数，就变成了"切换到另一个分支"的命令

（2）已经提交到了暂存区，可以使用
git reset HEAD <file_name>
将暂存区的修改回退到工作区，当用HEAD参数时，表示最新版本，此时状态变为暂存区空了，但工作区有修改，可以使用上面的方法在撤销工作区的修改


总结：
（1）当改乱了工作区某文件的内容，想直接丢弃修改，用命令git checkout -- file
（2）当改乱了工作区某个文件的内容，还添加到了暂存区，想丢弃修改，分两步，第一步用命令git reset HEAD <file_name>，第二步用（1）
（3）已经提交到本地版本库，但没有推送到远程库时，想撤销修改，使用版本回退 

-------------------
删除文件
一般情况下，通常直接在文加管理器中把没用的文件删了 rm <file_name>
git可以知道文件被删除了，git status就会立即知道哪些文件被删除了，此时有两个选择
（1）确实言删除该文件，就用命令git rm <file_name>删除，然后git commit提交（如果先手动删除文件，使用git add 和 git rm效果是一样的）
（2）删除错了，可以将版本库中的文件恢复过来，git checkout -- <file_name>，checkout其实使用版本库里面的版本题画年工作区的版本，无论工作区被修改还是删除，都可以还原

-------------------
远程仓库
因为git是分布是版本控制，可以自己搭建一个git服务器，或者直接用github免费仓库
github使用ssh协议，使用github的方法是：
（1）创建SSH Key:先看在用户主目录下的.ssh下面有没有存在id_rsa和id_rsa.pub，有的话就下一步，没有的话就用下面的命令/home/aurora/.ssh $ ssh-keygen -t rsa -C "youremail@example.com"
id_rsa是私钥，不能泄露，id_rsa.pub是公钥，可以对外公开。
（2）登陆github账户，setting -> sshkey -> add -> 在key上粘贴id_rsa.pub文件的内容


------------------------------
添加远程库（在github上）
（1）在github上创建仓库
（2）关联：git remote add origin git@github.com:LiuDui/GItRepertory.git
添加后origin就是远程库的名字，也是git默认的叫法，可以改成别的
（3）推送：git push -u origin master
把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程
下次提交直接 git push origin master

----------------------------
从远程库克隆

git clone git@github.com:LiuDui/ComputerSystemStudy.git

----------------------------------------分支管理
---------------------------
创建与合并分支
HEAD指针指向matser，master指向时间线上的节点，创建分支就是再创建一个指针，指向master，切换分支，就是让HEAD指向新的指针，所以创建和合并很快

创建并切换分支dev：
git checkout -b dev
-b参数表示创建并切换，相当于
git branch dev
git checkout dev

查看分支：
git branch
会列出所有分支，当前分支前面会标一个*号
[aurora@localhost GItRepertory]$ git branch
* dev
  master

当前在dev分支上，修改当前文件，并提交，提交后切换到master分支
git checkout master
查看文件，发现当前文件并未修改，将已经修改的dev分支，合并到当前分支：
get merge dev

[aurora@localhost GItRepertory]$ git merge dev
更新 a7a1d73..24f127f
Fast-forward
 learngit.txt | 37 ++++++++++++++++++++++++++++++++++++-
 1 file changed, 36 insertions(+), 1 deletion(-)

Fast-forward表示，这次合并是“快进合并”，就是直接把master指向dev的当前提交，所以合并速度非常快

合并完成后，可以删除dev分支：
[aurora@localhost GItRepertory]$ git branch -d dev
已删除分支 dev（曾为 24f127f）。
[aurora@localhost GItRepertory]$ git branch
* master

总结：
Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

---------------------------------------
解决冲突
冲突产生的一种情况就是，A创建一个分支brancha，B创建一个分支branchb，A和B同时对文件X进行了修改。
[aurora@localhost GItRepertory]$ touch confict
[aurora@localhost GItRepertory]$ git add confict
[aurora@localhost GItRepertory]$ git commit -m "add one file named confict"
[master 421e94e] add one file named confict
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 confict
[aurora@localhost GItRepertory]$ git checkout -b A
切换到一个新分支 'A'
[aurora@localhost GItRepertory]$ git checkout -b B
切换到一个新分支 'B'
[aurora@localhost GItRepertory]$ git checkout A
M	confict
切换到分支 'A'
[aurora@localhost GItRepertory]$ echo 'Something in true A' > confict 
[aurora@localhost GItRepertory]$ git add confict
[aurora@localhost GItRepertory]$ git commit -m "modify confict"
[A 2456b95] modify confict
 1 file changed, 1 insertion(+)
[aurora@localhost GItRepertory]$ git checkout B
切换到分支 'B'
[aurora@localhost GItRepertory]$ echo 'Something in  B' > confict 
[aurora@localhost GItRepertory]$ git add confict
[aurora@localhost GItRepertory]$ git commit "modify confict"
error: pathspec 'modify confict' did not match any file(s) known to git.
[aurora@localhost GItRepertory]$ git commit "modify file"
error: pathspec 'modify file' did not match any file(s) known to git.
[aurora@localhost GItRepertory]$ git commit -m "modify confict"
[B d24eaec] modify confict
 1 file changed, 1 insertion(+)
[aurora@localhost GItRepertory]$ git status
# 位于分支 B
无文件要提交，干净的工作区
[aurora@localhost GItRepertory]$ cat confict 
Something in  B
[aurora@localhost GItRepertory]$ git checkout A
切换到分支 'A'
[aurora@localhost GItRepertory]$ cat confict 
Something in true A
[aurora@localhost GItRepertory]$ git merge B
自动合并 confict
冲突（内容）：合并冲突于 confict
自动合并失败，修正冲突然后提交修正的结果。
[aurora@localhost GItRepertory]$ git status
# 位于分支 A
# 您有尚未合并的路径。
#   （解决冲突并运行 "git commit"）
#
# 未合并的路径：
#   （使用 "git add <file>..." 标记解决方案）
#
#	双方修改：     confict
#
修改尚未加入提交（使用 "git add" 和/或 "git commit -a"）
[aurora@localhost GItRepertory]$ vim confict 
[aurora@localhost GItRepertory]$ git add confict
[aurora@localhost GItRepertory]$ git commit -m "confict fixed"
[A 39cae63] confict fixed
[aurora@localhost GItRepertory]$ git log --graph --pretty=oneline --abbrev-commit
*   39cae63 confict fixed
|\  
| * d24eaec modify confict
* | 2456b95 modify confict
|/  
* 421e94e add one file named confict
* 24f127f modify learngit.txt
*   a7a1d73 Merge remote-tracking branch 'origin/master'
|\  
| * 90d1680 Delete README.md
| * e0ac0cd Initial commit
* 6f21570 del
* 5a7de58 modify learngit
* b181eeb 新增文件用于github测试
* 0d649f3 add two file
[aurora@localhost GItRepertory]$ git checkout master
切换到分支 'master'
您的分支领先 'origin/master' 共 2 个提交。
  （使用 "git push" 来发布您的本地提交）
[aurora@localhost GItRepertory]$ git merge A
更新 421e94e..39cae63
Fast-forward
 confict | 2 ++
 1 file changed, 2 insertions(+)
[aurora@localhost GItRepertory]$ git branch -d A,B 
error: 分支 'A,B' 未发现。
[aurora@localhost GItRepertory]$ git branch -d A
已删除分支 A（曾为 39cae63）。
[aurora@localhost GItRepertory]$ git branch -d B
已删除分支 B（曾为 d24eaec）。
[aurora@localhost GItRepertory]$ git log --graph --pretty=oneline --abbrev-commit
*   39cae63 confict fixed
|\  
| * d24eaec modify confict
* | 2456b95 modify confict
|/  
* 421e94e add one file named confict
* 24f127f modify learngit.txt
*   a7a1d73 Merge remote-tracking branch 'origin/master'
|\  
| * 90d1680 Delete README.md
| * e0ac0cd Initial commit
* 6f21570 del
* 5a7de58 modify learngit
* b181eeb 新增文件用于github测试
* 0d649f3 add two file
[aurora@localhost GItRepertory]$ 

手动解决冲突问题

--------------------------------
分支管理策略
通常，合并分支时，如果可能，git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
如果要强制禁用Fast forward模式，git就会在merge时生成一个新的commit，这样，此分支历史就可以看出分支信息。

[aurora@localhost GItRepertory]$ touch branchManage
[aurora@localhost GItRepertory]$ echo "hhhhhh" > branchManage 
[aurora@localhost GItRepertory]$ git add branchManage
[aurora@localhost GItRepertory]$ git commit -m "add branchManage"
[dev 3f642b7] add branchManage
 1 file changed, 1 insertion(+)
 create mode 100644 branchManage
[aurora@localhost GItRepertory]$ git checkout master
切换到分支 'master'
[aurora@localhost GItRepertory]$ git merge --no-ff -m "merge with no-ff" dev     // 不使用fastforward 的参数 --no-ff 会生成新的commit ，所以使用-m参数进行说明
Merge made by the 'recursive' strategy.
 branchManage | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 branchManage
[aurora@localhost GItRepertory]$ git log --graph --pretty=oneline --abbrev-commit
*   32f8d05 merge with no-ff
|\  
| * 3f642b7 add branchManage
|/  
* 608e274 modify learngit
* 6818129 modify leatning.txt
*   39cae63 confict fixed
|\  
| * d24eaec modify confict
* | 2456b95 modify confict
|/  
* 421e94e add one file named confict
* 24f127f modify learngit.txt
*   a7a1d73 Merge remote-tracking branch 'origin/master'
|\  
| * 90d1680 Delete README.md
| * e0ac0cd Initial commit
* 6f21570 del
* 5a7de58 modify learngit
* b181eeb 新增文件用于github测试
* 0d649f3 add two file

--no-ff合并方式合并之后log能看出来有合并记录，fast forward合并就看不出来做过合并

分支策略：
首先，master分支应该是非常稳定的，也就是仅仅用来发布新版本，平时不能在上面干活
干活在dev分支，dev分支是不稳定的，合并带matser分支上，然后发布。

-------------------------------------
Bug分支(干到一半干其他事保存现场的分支)
当前正在dev分支工作，突然需要修复一个bug，修复bug很自然的想创建新的分支，但是当前dev的工作还未提交，并且因为未完成，所以无法提交
可以使用git提供的stash功能，把当前的工作现场存储起来，等以后恢复现场后继续工作。
$git stash
切换到master分支,checkout bug分支，修复完毕，合并，删除bug分支，切换回去
$git checkout dev
查看有哪些可恢复的工作
$git stash list
stash@{0}: WIP on dev: f52c633 add merge
恢复办法有两个：
（1）git stash apply 恢复，但是stash内容并不删除，需要手动用git stash drop来删除
（2）git stash pop  看名字就知道，使用堆栈进行上下文恢复，这个也会删除stash的内容

允许多次stash，先用git stash list查看，然后恢复到制定的stash，用命令
git stash apply stash@{0}

---------------------------------------------
Feature分支
软件开发过程中，总有无穷无尽的新功能要不断的添加进来，添加一个新功能，一定会用分支搞定。一般每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后删除该分支。

有些功能未开发完便被废弃，此时分支未被合并，就要被删除，若要强行删除，使用 大写的 -D 参数
git branch -D <branch-name>


------------------------------------------
多人协作

当从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin
查看远程库的信息，用git remote
或者用git remote -v 显示更详细的信息

推送分支:就是把该分支上的所有本地提交推送到远程库，推送时，要指定本地分支，这样，git就会把该分支推送到远程库对应的远程分支上：
git push origin master
推送其他分支
git push origin dev

分支推送与否：
（1）master分支是主分支，因此要时刻与远程同步；
（2）dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步
（3）bug分支之用于在本地修复bug，就没有必要推倒远程了
（4）feature分支是否推到远程，取决于你是是否与同时合作在上面开发。

抓取分支：
克隆远程库时，默认在master分区
在本地建立和远程对应的分支，使用：
git checkout -b branch-name origin/branch-name
查看远程库信息，使用git remote -v
从本地新建的分支如果不推送到远程，对其他人就是不可见的
从本地推送分支，使用git push origin <branch name> ，如果推送失败，提示被拒绝，有其他修改，先用git pull 抓取远程的提交
抓取有可能失败，若原因是no tracking information，说明没有制定本地dev分支与远程origin/dev分支的链接，设置链接：
git branch --set-upstream-to=origin/dev dev
然后再pull
pull成功后若有冲突，则手动解决。
冲突解决后，再使用git push origin <branch name>推送就能成功


------------------------------------
Rebase
多人在统一分支上协作时，很容易出现冲突，即使没有冲突，后push的人不得不先pull，在本地合并，然后才能push成功，
rebase操作可以把本地未push的分叉提交历史整理成直线；
rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。

-----------------------------------------------------标签管理
发布一个版本时，通常现在版本库和宗打一个标签（tag），唯一确定打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把八个打标签时刻的历史版本取出来。所以，标签也是版本库的一个快照。
Git的标签虽然是版本的快照，但是其实他就是指向某个commit的指针，与分支很像，但是分支可以移动，标签不能移动。

Git有commit，而tag就是起一个更容易记的名字，例如commit号是9lkjf898，不如版本号设置为v1.2

---------------------------------------
创建标签
（1）切换到需要打标签的分支上
（2）敲命令
git tag <name>
（3）查看所有标签
git tag

对之前的某个commit打标签
（1）找到commit号，用git log
（2）打标签，git tag <tag name> <commmit id>

标签不是按照时间顺序列出，而是按照字母顺序列出，用git show <tag name>查看标签信息。

创建带有说明的标签，用-a指定标签，-m指定说明文字
git tag -a <tag name> -m "message" <commit id>

** 标签总是和某个commit挂钩，如果这个commit既出现在commit分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。

---------------------------------------
操作标签

删除标签
git tag -d <tag name>

创建的标签都只存储再本地，不会自动推送到远程。所以打错的标签可以在本地安全删除
推送某个标签到远程，使用命令
git push origin <tag name>
或者，一次性推送完全部尚未推送到远程的本地标签
git push origin --tags

如果已经推送到远程，需要删除，步骤：
（1）先从本地删除：git tag -d <tag name>
（2）从远程删除：git push origin :refs/tags/<tag name>

删除远程库：git remote rm origin

----------------------------------自定义Git
---------------------------
忽略特殊文件
有些文件方法Git工作目录中，但是不能提交，每次git status都会显示Untracked files，可以在Git工作区的根目录下创建一个特殊的.gitignore文件，把要忽略的文件名填进去，Git就会自动忽略这些文件

忽略文件的原则是：
（1）忽略操作系统自动生成的文件，比如缩略图等
（2）忽略编译生成的中间文件/可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没有必要放进版本库，比如java编译产生的.class文件
（3）忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。

编写方式：
（1）创建文件.gitignore
（2）写文件：
*.class # 忽略java编译生成的class文件
（3）最后把.gitignore也提交到Git，就完成了

[aurora@localhost GItRepertory]$ touch .gitignore
[aurora@localhost GItRepertory]$ echo *.class > .git
.git/       .gitignore  
[aurora@localhost GItRepertory]$ echo *.class > .git
.git/       .gitignore  
[aurora@localhost GItRepertory]$ echo *.class > .gitignore 
[aurora@localhost GItRepertory]$ git status
# 位于分支 dev
# 未跟踪的文件:
#   （使用 "git add <file>..." 以包含要提交的内容）
#
#	.gitignore
提交为空，但是存在尚未跟踪的文件（使用 "git add" 建立跟踪）
[aurora@localhost GItRepertory]$ git add .gitignore
[aurora@localhost GItRepertory]$ git commit -m "add gitingore"
[dev 587c559] add gitingore
 1 file changed, 1 insertion(+)
 create mode 100644 .gitignore
[aurora@localhost GItRepertory]$ git checkout master
切换到分支 'master'
[aurora@localhost GItRepertory]$ git branch
  dev
* master
[aurora@localhost GItRepertory]$ git merge dev
Merge made by the 'recursive' strategy.
 .gitignore | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 .gitignore
[aurora@localhost GItRepertory]$ git branch
  dev
* master
[aurora@localhost GItRepertory]$ ll
总用量 32
-rw-r--r--. 1 aurora root     0 3月   8 17:54 addition..txt
-rw-r--r--. 1 aurora root     7 3月   8 11:20 branchManage
-rw-r--r--. 1 aurora root    21 3月   8 11:03 confict
-rwxr-xr-x. 1 aurora root 13481 3月   8 11:17 learngit.txt
-rw-r--r--. 1 aurora root    25 3月   7 09:59 one.txt
-rw-r--r--. 1 aurora root     0 3月   8 09:10 three.txt
-rw-r--r--. 1 aurora root    95 3月   7 10:24 two.txt
[aurora@localhost GItRepertory]$ ls -al
总用量 36
drwxr-xr-x. 3 aurora root   159 3月   8 17:54 .
drwxr-xr-x. 5 aurora root    72 3月   8 14:18 ..
-rw-r--r--. 1 aurora root     0 3月   8 17:54 addition..txt
-rw-r--r--. 1 aurora root     7 3月   8 11:20 branchManage
-rw-r--r--. 1 aurora root    21 3月   8 11:03 confict
drwxr-xr-x. 8 aurora root   201 3月   8 17:54 .git
-rw-r--r--. 1 aurora root     8 3月   8 17:54 .gitignore
-rwxr-xr-x. 1 aurora root 13481 3月   8 11:17 learngit.txt
-rw-r--r--. 1 aurora root    25 3月   7 09:59 one.txt
-rw-r--r--. 1 aurora root     0 3月   8 09:10 three.txt
-rw-r--r--. 1 aurora root    95 3月   7 10:24 two.txt
[aurora@localhost GItRepertory]$ cat .gitignore
*.class
[aurora@localhost GItRepertory]$ touch App.class
[aurora@localhost GItRepertory]$ git add App.class
下列路径根据您的一个 .gitignore 文件而被忽略：
App.class
使用 -f 参数如果您确实要添加它们。
fatal: 没有文件被添加
[aurora@localhost GItRepertory]$ git check-ignore -v App.class
.gitignore:1:*.class	App.class
[aurora@localhost GItRepertory]$ git add -f App.class

--------------------------
配置别名
git config --global alias.<别名> <原名>
例如，将status改为st

[aurora@localhost GItRepertory]$ git config --global alias.st status
[aurora@localhost GItRepertory]$ git st
# 位于分支 master
# 您的分支领先 'origin/master' 共 2 个提交。
#   （使用 "git push" 来发布您的本地提交）
#
# 要提交的变更：
#   （使用 "git reset HEAD <file>..." 撤出暂存区）
#
#	新文件：    App.class
#[aurora@localhost GItRepertory]$ git st
# 位于分支 master
# 您的分支领先 'origin/master' 共 2 个提交。
#   （使用 "git push" 来发布您的本地提交）
#
# 要提交的变更：
#   （使用 "git reset HEAD <file>..." 撤出暂存区）
#
#	新文件：    App.class
#
[aurora@localhost GItRepertory]$ git reset HEAD App.class
[aurora@localhost GItRepertory]$ git st
# 位于分支 master
# 您的分支领先 'origin/master' 共 2 个提交。
#   （使用 "git push" 来发布您的本地提交）
#
无文件要提交，干净的工作区
[aurora@localhost GItRepertory]$ ls -al
[aurora@localhost GItRepertory]$ git config --global alias.unstage 'reset HEAD'
[aurora@localhost GItRepertory]$ get unstage App.class 
[aurora@localhost GItRepertory]$ git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
[aurora@localhost GItRepertory]$ git lg
*   96bcf6b - (HEAD, master) Merge branch 'dev' (12 分钟之前) <LiuRui>
|\  
| * 587c559 - (dev) add gitingore (14 分钟之前) <LiuRui>
* |   415ca04 - (origin/master) Merge branch 'master' of github.com:LiuDui/GItRepertory (4 小时之前) <LiuRui>
|\ \  
| * | 45ec5fa - add file named addition..txt (4 小时之前) <LiuRui>
* | |   32f8d05 - merge with no-ff (7 小时之前) <LiuRui>
|\ \ \  
| |/ /  
|/| /   
| |/    
| * 3f642b7 - (tag: v0.0, origin/dev) add branchManage (7 小时之前) <LiuRui>
|/  
* 608e274 - modify learngit (7 小时之前) <LiuRui>
* 6818129 - modify leatning.txt (7 小时之前) <LiuRui>
*   39cae63 - confict fixed (7 小时之前) <LiuRui>
|\  
| * d24eaec - modify confict (7 小时之前) <LiuRui>
* | 2456b95 - modify confict (7 小时之前) <LiuRui>
|/  
* 421e94e - add one file named confict (7 小时之前) <LiuRui>
* 24f127f - modify learngit.txt (7 小时之前) <LiuRui>
*   a7a1d73 - Merge remote-tracking branch 'origin/master' (8 小时之前) <LiuRui>
|\  
| * 90d1680 - Delete README.md (8 小时之前) <RuiLiu>
| * e0ac0cd - Initial commit (8 小时之前) <RuiLiu>
* 6f21570 - del (8 小时之前) <LiuRui>
* 5a7de58 - modify learngit (8 小时之前) <LiuRui>
* b181eeb - 新增文件用于github测试 (8 小时之前) <root>
* 0d649f3 - add two file (10 小时之前) <LiuRui>
[aurora@localhost GItRepertory]$ cat .git/config          #------------------仓库配置文件
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote "origin"]
	url = git@github.com:LiuDui/GItRepertory.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
	remote = origin
	merge = refs/heads/master
[aurora@localhost GItRepertory]$ cat .git/config        #--------------------当前用户配置文件

[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote "origin"]
	url = git@github.com:LiuDui/GItRepertory.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
	remote = origin
	merge = refs/heads/master









